#!/bin/bash

ME="$0"

err() {
	echo "$ME: $*" >&2
	exit 1
}

log() {
	echo "$*" >&2
}

## only want to run as unprivileged user
[ `whoami` == 'root' ] && err "dont wanna run as root"

ZIMBRA_ROOT="$HOME"
PATH="$ZIMBRA_ROOT/bin:$PATH"

dpkg_init() {
	mkdir -p \
		$ZIMBRA_ROOT/var/lib/dpkg		\
		$ZIMBRA_ROOT/var/lib/dpkg/updates	\
		$ZIMBRA_ROOT/var/lib/dpkg/triggers	\
		$ZIMBRA_ROOT/var/lib/dpkg/info		\
		$ZIMBRA_ROOT/var/log			\
		$ZIMBRA_ROOT/.tmp			|| err "permission problem. cannot access package database"

	touch	\
		$ZIMBRA_ROOT/var/lib/dpkg/status	\
		$ZIMBRA_ROOT/var/lib/dpkg/available	|| err "permission problem. cannot access package database"
}

dpkg_call() {
	dpkg_init
	export PATH="$PATH:/sbin:/usr/sbin"
#	older dpkg (eg. 1.5.x, which is in ubuntu 10.x) dont support that
#	fakeroot dpkg --force-not-root --foreign-architecture All --root=$ZIMBRA_ROOT --log=$ZIMBRA_ROOT/var/log/dpkg.log "$@"
	fakeroot dpkg --force-not-root --force-architecture --root=$ZIMBRA_ROOT --log=$ZIMBRA_ROOT/var/log/dpkg.log "$@"
}


## newer versions of dpkg want ":<arch>" given in package name on non-native archs (eg. "All")
zmpkg_need_pkgname_filter() {
	local version=`dpkg_call --version | grep "version"`
	case "$version" in
	    *1.14*)
		    return 1
	    ;;
	    *1.15.5*)
		    return 1
	    ;;
	    *1.16*)
		    return 0
	    ;;
	    *)
		    return 0
	    ;;
	esac
}

zmpkg_help() {
	echo "Available commands:"
	echo "$ME install <deb-file-name>         install a package file"
	echo "$ME remove <package-name>           remove a package"
	echo "$ME list                            list installed packages"
	echo "$ME redeploy                        deploy zimlets that haven't been deployed yet (due interruption)"
	echo "$ME check-installed <package-name>  check whether package with given name is installed (for scripting use)"
	echo "$ME devel-init <zimbra-root>        initial local development environment (using given zimbra installation)"
	echo "$ME dpkg <...>                      direct dpkg call"
	echo ""
	if dpkg --version >/dev/null; then
		local dpkg_version=`dpkg --version | grep "package management program version" | sed -e 's~.*version ~~' 2>/dev/null`
		echo "Using dpkg version: $dpkg_version"
	else
		echo "========="
		echo "  WARNING: dpkg command doesn't seem to be installed on your system - I *need* it"
		echo "  Either install it using your operating system's package management"
		echo "  or install it manually into $ZIMBRA_ROOT/bin"
		echo "========="
		exit 2
	fi
	if zmpkg_need_pkgname_filter ; then
		echo "Package name suffixing enabled for this dpkg version"
	else
		echo "Package name suffixing disabled for thi dpkg version"
	fi
	exit 1
}

file_md5() {
	md5sum "$1" | sed -e 's~ .*~~'
}

run_sql() {
	$ZIMBRA_ROOT/bin/mysql < $1
}

need_to_deploy() {
	local zimlet="$1"
	local deployed_md5=`cat "$zimlet.deployed" 2>/dev/null`
	local install_md5=`file_md5 "$zimlet" 2>/dev/null`
	if [ "$deployed_md5" != "$install_md5" ]; then
		return 0
	else
		return 1
	fi
}

mark_deployed() {
	file_md5 "$1" > "$1.deployed"
}

## scan for deployed zimlets
scan_deployed_zimlets() {
	find $ZIMBRA_ROOT/zimlets-install -name "*.zip.deployed" 2>/dev/null | grep -v "/skins/"
}

## undeploy removed zimlets
run_undeploy_zimlets() {
	for statfile in `scan_deployed_zimlets` ; do
		local archive=`echo "$statfile" | sed -e 's~.deployed$~~'`
		local zimlet=`echo "$archive" | sed -e 's~.*/~~; s~.zip$~~'`
		if [ ! -f "$archive" ]; then
			log "Undeploying removed zimlet: $zimlet"
			$ZIMBRA_ROOT/bin/zmzimletctl undeploy "$zimlet" && rm -f $statfile
		fi
	done
}

## scan for deployed skins
scan_deployed_skins() {
	find $ZIMBRA_ROOT/zimlets-install -name "*.zip.deployed" 2>/dev/null | grep "/skins/"
}

## undeploy remove zimlets
run_undeploy_skins() {
	for statfile in `scan_deployed_skins` ; do
		local archive=`echo "$statfile" | sed -e 's~.deployed$~~'`
		local skin=`echo "$archive" | sed -e 's~.*/~~; s~.zip$~~'`
		if [ ! -f "$archive" ]; then
#			log "Undeploying removed skin: $skin"
#			$ZIMBRA_ROOT/bin/zmskindeploy undeploy "$skin" && rm -f $statfile
			log "WARN: Removed skin needs to be undeployed manually: $skin"
			rm -f $statfile
		fi
	done
}

## run sql scripts
run_deploy_sql() {
	for sqlfile in `find $ZIMBRA_ROOT/zimlets-install -name "mailboxd-db-schema.sql" 2>/dev/null` ; do
		if need_to_deploy $sqlfile ]; then
			log "Deploying sql file: $sqlfile"
			run_sql $sqlfile && mark_deployed $sqlfile
		fi
	done
}

## scan for installed (but probably not yet deployed) zimlet archives
scan_zimlet_archives() {
	find $ZIMBRA_ROOT/zimlets-install -name "*.zip" 2>/dev/null | grep -v "/skins/"
}

## deploy zimlets from zimlet archives
run_deploy_zimlets() {
	for archive in `scan_zimlet_archives` ; do
		if need_to_deploy "$archive" ; then
			log "Deploying zimlet: $archive"
			$ZIMBRA_ROOT/bin/zmzimletctl deploy "$archive" && mark_deployed "$archive"
		fi
	done
}

## scan for installed (but probably not yet deployed) skin archives
scan_skin_archives() {
	find $ZIMBRA_ROOT/zimlets-install -name "*.zip" | grep "/skins/"
}

## deploy skins from skin archives
run_deploy_skins() {
	for archive in `scan_skin_archives` ; do
		if need_to_deploy "$archive" ; then
			log "Deploying skin: $archive"
			$ZIMBRA_ROOT/bin/zmskindeploy "$archive" && mark_deployed "$archive"
		fi
	done
}

## run the post-install scripts
run_postinstall() {
	## run post-install scripts
	for scriptfile in `find $ZIMBRA_ROOT/zimlets-install -name "post-install.sh" 2>/dev/null` ; do
		if need_to_deploy $scriptfile ; then
			log "Running post-install script: $scriptfile"
			$scriptfile && mark_deployed $scriptfile
		fi
	done

	## remove stale post-install markers
	for marker in `find $ZIMBRA_ROOT/zimlets-install -name "post-install.sh.deployed" 2>/dev/null` ; do
		local orig=`echo "$marker" | sed -e 's~\.deployed$~~'`
		if [ ! -f "$orig" ]; then
			log "Removing old post-install marker: $orig"
			rm -f "$marker"
		fi
	done
}

zmpkg_deploy_zimlets() {
	run_undeploy_zimlets
	run_undeploy_skins
	run_deploy_sql
	run_deploy_zimlets
	run_deploy_skins
	run_postinstall

	## removed empty directories
	find $ZIMBRA_ROOT/zimlets-install -type d -exec "rmdir" "{}" ";" 2>/dev/null
	find $ZIMBRA_ROOT/zimlets-scripts -type d -exec "rmdir" "{}" ";" 2>/dev/null
	return 0
}

zmpkg_install() {
	[ "$1" ] || zmpkg_help
	dpkg_call -i "$@" && zmpkg_deploy_zimlets
}

zmpkg_list() {
	dpkg_call -l "$@" | sed -e 's~:All ~     ~'
}

## fixme should support versioning
zmpkg_check_installed() {
	pkglist=`echo "$*" | sed -e 's~,~ ~g'`
	for i in $pkglist ; do
		if [ "$i" != "__NONE__" ]; then
			if ! ( dpkg_call -s "$i" || dpkg_call -s "$i:All" ) 2>/dev/null >/dev/null; then
				err "missing dependency $i"
				exit 1
			fi
		fi
	done
	exit 0
}

zmpkg_remove() {
	local l=""
	local i

	if zmpkg_need_pkgname_filter ; then
		for i in "$@" ; do
			i=`echo "$i" | sed -e 's~:All~~'`
			l="$l $i:All"
		done
	else
		for i in "$@" ; do
			i=`echo "$i" | sed -e 's~:All~~'`
			l="$l $i"
		done
	fi

	dpkg_call -r $l
	zmpkg_deploy_zimlets
}

zmpkg_devinit() {
	if [ ! "$1" ]; then
		echo "$0 devel-init <zimbra-root>"
		exit 2
	fi
	local ORIGINAL_ZIMBRA_ROOT="$1"

	if [ `whoami` == "zimbra" ]; then
		echo "$0: never run devel-init as the zimbra user - it would destroy your zimbra installation !"
		exit 3
	fi

	## dummy for zmzimletctl
	(
	    echo '#!/bin/bash'
	    echo ''
	    echo 'echo "zimletctl dummy: " $0 $*'
	    echo 'exit 0'
	) > $ZIMBRA_ROOT/bin/zmzimletctl
	chmod +x $ZIMBRA_ROOT/bin/zmzimletctl

	## dummy for zmskindeploy
	(
	    echo '#!/bin/bash'
	    echo ''
	    echo 'echo "zmskindeploy dummy: " $0 $*'
	    echo 'exit 0'
	) > $ZIMBRA_ROOT/bin/zmskindeploy
	chmod +x $ZIMBRA_ROOT/bin/zmskindeploy

	## global libdir
	local dirlist="lib/jars jetty/lib jetty/lib/ext jetty/lib/naming jetty/lib/plus jetty/lib/jsp-2.1"
	for i in $dirlist ; do
		mkdir -p $ZIMBRA_ROOT/$i || err "failed to create $ZIMBRA_ROOT/$i"
		(
			cd $ZIMBRA_ROOT/$i || err "failed to create $ZIMBRA_ROOT/$i"
			for i in $ORIGINAL_ZIMBRA_ROOT/$i/*.jar ; do
				ln -sf $i
			done
		)
	done

	## user frontend web container
	local user_lib="mailboxd/webapps/zimbra/WEB-INF/lib"
	mkdir -p $ZIMBRA_ROOT/$user_lib
	(
		cd $ZIMBRA_ROOT/$user_lib
		for i in $ORIGINAL_ZIMBRA_ROOT/$user_lib/*.jar ; do
			ln -sf $i
		done
	)

	## admin backend web containr
	local admin_lib="mailboxd/webapps/zimbraAdmin/WEB-INF/lib"
	mkdir -p $ZIMBRA_ROOT/$admin_lib
	(
		cd $ZIMBRA_ROOT/$admin_lib
		for i in $ORIGINAL_ZIMBRA_ROOT/$admin_lib/*.jar ; do
			ln -sf $i
		done
	)

	## service web containr
	local service_lib="mailboxd/webapps/service/WEB-INF/lib"
	mkdir -p $ZIMBRA_ROOT/$service_lib
	(
		cd $ZIMBRA_ROOT/$service_lib
		for i in $ORIGINAL_ZIMBRA_ROOT/$service_lib/*.jar ; do
			ln -sf $i
		done
	)
}

case "$1" in
	install)
		shift
		zmpkg_install "$@"
	;;
	list)
		shift
		zmpkg_list "$@"
	;;
	remove)
		shift
		zmpkg_remove "$@"
	;;
	redeploy)
		shift
		zmpkg_deploy_zimlets "$@"
	;;
	check-installed)
		shift
		zmpkg_check_installed "$@"
	;;
	devel-init)
		shift
		zmpkg_devinit "$@"
	;;
	dpkg)
		shift
		dpkg_call "$@"
	;;
	*)
		zmpkg_help
	;;
esac
